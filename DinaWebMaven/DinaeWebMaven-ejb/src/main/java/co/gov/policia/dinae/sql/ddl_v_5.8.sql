-- cu-iv-04 Consultar Semilleros - Creacion de Opcion de menu.

Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values (36,'Consultar Semilleros','PRIVADO','BEAN:#{cuIv4ConsultarDetalleSemilleroFaces.initReturnCU}',4,3,'Permite al usuario consultar el detalle de los semilleros de investigación.');

Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values (55,22,6);
Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values (56,22,36);

Insert into USUARIO_ROL (ID_USUARIO_ROL,IDENTIFICADOR_USUARIO,ID_ROL,FECHA_INICIO,FECHA_FIN,ACTIVO) values (47,'10153998972',22,to_date('18-FEB-14','DD-MON-RR'),null,'S');


-- cu-co-08 - cu-co-10 Envio correos

Insert into CORREO_PARAMETRIZA (CODIGO,ASUNTO,FORMATO) values ('CU_CO_08_INFORMAR_ENVIO_ENSAYOS_PREVIO_REVISA','Envío de ensayos para evaluación','text/html; charset=utf-8');
Insert into CORREO_PARAMETRIZA (CODIGO,ASUNTO,FORMATO) values ('CU_CO_10_INFORMAR_RESULTADO_EVALUACION_ENSAYOS','Publicación de resultados de convocatoria de ensayo crítico.','text/html; charset=utf-8');

alter table proyecto add presupuesto_solicitado NUMBER;

-- Opciones Menu - Cu-Co-05 - Cu-Co-06

Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values (40,'Consultar propuestas de convocatorias de financiación','PRIVADO','BEAN:#{cuCo5ConsultaPropuestasProyectosConvocatoriaFaces.initReturnCU}',2,5,'Permite al usuario consultar las propuestas de proyectos de investigación para convocatoria en el sistema.');
Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values (41,'Consultar convocatoria','PRIVADO','BEAN:#{cuCo6ConsultaConvocatoriasFaces.initReturnCU}',2,6,'Permite al usuario consultar las convocatorias incluyendo el detalle de las mismas.');

INSERT INTO ROL_OPCION_MENU (ID_ROL_OPCION_MENU, ID_ROL, ID_OPCION_MENU) VALUES ('62', '23', '40');
INSERT INTO ROL_OPCION_MENU (ID_ROL_OPCION_MENU, ID_ROL, ID_OPCION_MENU) VALUES ('63', '20', '41');

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO 
ADD (ES_FUENTE1_INTERNA VARCHAR2(1) );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO 
ADD (ES_FUENTE2_INTERNA VARCHAR2(1) );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO 
ADD (ES_FUENTE3_INTERNA VARCHAR2(1) );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO 
ADD (ES_FUENTE4_INTERNA VARCHAR2(1) );

alter table ACTIVIDADES_PLAN_TRABAJO add PORCENTAJE_AVANCE_FINAL NUMBER;
alter table ACTIVIDADES_PLAN_TRABAJO add ESTADO_AVANCE_FINAL NUMBER;
ALTER TABLE ACTIVIDADES_PLAN_TRABAJO ADD CONSTRAINT ACTIV_PLAB_TRDB_ESTADO_FK4 FOREIGN KEY (ESTADO_AVANCE_FINAL) REFERENCES CONSTANTES (ID_CONSTANTES);

alter table COMPROMISO_PROYECTO add FECHA_ENVIO_VICIN TIMESTAMP;
alter table COMPROMISO_IMPLEMENTACION add FECHA_ENVIO_VICIN TIMESTAMP;

---- CALCULO PRESUPUESTO


ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (POLICIA_NACIONAL_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (POLICIA_NACIONAL_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (VICIN_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (VICIN_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (UNIDAD_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (UNIDAD_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE1_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE1_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE2_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE2_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE3_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE3_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE4_ESPECIE DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO  
MODIFY (FUENTE4_EFECTIVO DEFAULT 0 );

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO 
ADD (ORDEN NUMBER);

CREATE TABLE RESUMEN_PRESUPUESTO_EJECUTADO 
(
  ID_RESUMEN_PRES_EJECUTA NUMBER NOT NULL PRIMARY KEY
, ID_PROYECTO NUMBER NOT NULL 
, ID_INFORME_AVANCE NUMBER 
, NOMBRE_RUBRO VARCHAR2(30 BYTE) NOT NULL 
, POLICIA_NAL_PPTO NUMBER(20, 2) DEFAULT 0 
, POLICIA_NAL_EJECUTA NUMBER(20, 2) DEFAULT 0 
, VICIN_PPTO NUMBER(20, 2) DEFAULT 0 
, VICIN_EJECUTA NUMBER(20, 2) DEFAULT 0 
, UNIDAD_PPTO NUMBER(20, 2) DEFAULT 0 
, UNIDAD_EJECUTA NUMBER(20, 2) DEFAULT 0 
, FUENTE1_PPTO NUMBER(20, 2) DEFAULT 0 
, FUENTE1_EJECUTA NUMBER(20, 2) DEFAULT 0 
, FUENTE2_PPTO NUMBER(20, 2) DEFAULT 0 
, FUENTE2_EJECUTA NUMBER(20, 2) DEFAULT 0 
, FUENTE3_PPTO NUMBER(20, 2) DEFAULT 0 
, FUENTE3_EJECUTA NUMBER(20, 2) DEFAULT 0 
, FUENTE4_PPTO NUMBER(20, 2) DEFAULT 0 
, FUENTE4_EJECUTA NUMBER(20, 2) DEFAULT 0 
, ORDEN NUMBER 
, TIPO VARCHAR2(1 BYTE) DEFAULT 'I' NOT NULL);


CREATE SEQUENCE  SEC_RESUMEN_PRESU_EJECUTA  MINVALUE 1 MAXVALUE 999999999999999 INCREMENT BY 1 START WITH 1;

ALTER TABLE ENSAYO_CRITICO ADD ID_UNIDAD_POLICIAL NUMBER;
ALTER TABLE ENSAYO_CRITICO ADD CONSTRAINT ID_UNIDAD_UNIDAD_ENSAYO_CRI_FK FOREIGN KEY (ID_UNIDAD_POLICIAL) REFERENCES UNIDAD_POLICIAL (ID_UNIDAD_POLICIAL);

ALTER TABLE CORREO_PARAMETRIZA ADD LABEL VARCHAR(100);
UPDATE CORREO_PARAMETRIZA SET LABEL=codigo;

Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values ('37','Plantilla correo','PRIVADO','BEAN:#{cuAdCorreoFaces.initReturnCU}','8',null,'Plantilla correo');
Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values ('38','Generar archivos SNIES','PRIVADO','BEAN:#{cuPr16EncargadoGeneracionArchivosSniesFaces.initReturnCU}','8',null,'Generar archivos SNIES');

Insert into ROL (ID_ROL,NOMBRE,REQUIERE_UNIDAD_POLICIAL) values ('32','Investigador principal de trabajo de grado','Y');
Insert into ROL (ID_ROL,NOMBRE,REQUIERE_UNIDAD_POLICIAL) values ('33','Encargado de generación archivos SNIES','N');

Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('57','2','37');
Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('59','33','8');
Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('58','33','38');

Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values ('39','Registrar asesoría','PRIVADO','BEAN:#{cuPr17AgregarAsesoriaProyectoInvestigacionFaces.initReturnCU}',3,null,'Registrar asesoría');
Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('61','31','39');

ALTER TABLE ASESORIA_PROYECTO ADD EVALUADOR VARCHAR2(100);

drop table EQUIPOS_INVESTIGACION_VERSION cascade constraints;
drop table INSTITUCIONES_PROYECTO_VERSION cascade constraints;
drop table FUENTE_PROYECTO_VERSION cascade constraints;
drop table SEMILLERO_PROYECTO_VERSION cascade constraints;
drop table GRUPO_INVEST_PROYECTO_VERSION cascade constraints;
drop table INVESTIGADORES_PROY_VERSION cascade constraints;
drop table PROYECTO_VERSION cascade constraints;
drop table EVENTO_PROYECTO_VERSION cascade constraints;
drop table OTROS_GASTOS_PROYECTO_VERSION cascade constraints;
drop table VIAJES_PROYECTO_VERSION cascade constraints;
drop table INDICADORES_PROYECTO_VERSION cascade constraints;
drop table TEMA_PROYECTO_VERSION cascade constraints;

ALTER TABLE RESUMEN_PRESUPUESTO_PROYECTO ADD ESTADO VARCHAR2(100) DEFAULT 'TEMPORAL';

create or replace
TRIGGER TRIGER_PRESUP_COMPROM_CUMPLIDO 
AFTER UPDATE ON COMPROMISO_PROYECTO 
REFERENCING OLD AS REG_VIEJO NEW AS REG_NUEVO 
FOR EACH ROW 
WHEN (REG_NUEVO.ESTADO = 107) 

DECLARE 
    
    V_TIPO_COMPROMISO COMPROMISO_PERIODO.TIPO_COMPROMISO%TYPE;

BEGIN     
  SELECT TIPO_COMPROMISO INTO V_TIPO_COMPROMISO FROM COMPROMISO_PERIODO WHERE ID_COMPROMISO_PERIODO = (SELECT ID_COMPROMISO_PERIODO FROM COMPROMISO_PROYECTO WHERE ID_COMPROMISO_PROYECTO = :REG_NUEVO.ID_COMPROMISO_PROYECTO);
   --COMPROMISO_PERIODO_FORMULACION_DEL_PROYECTO = 26 
  IF( V_TIPO_COMPROMISO = 26 ) THEN
    PKG_CALCULO_PRESUPUESTO.PRC_CREAR_ACTUALIZA_PRES( :REG_NUEVO.ID_PROYECTO );
    UPDATE RESUMEN_PRESUPUESTO_PROYECTO set ESTADO = 'COMPROMISO_CUMPLIDO' WHERE ID_PROYECTO = :REG_NUEVO.ID_PROYECTO;  
  END IF;
END;

  DROP TABLE VERSIONES CASCADE CONSTRAINTS;  
  CREATE TABLE VERSIONES
  (
    ID_VERSION NUMBER NOT NULL ,
    FECHA_VERSION TIMESTAMP (6) NOT NULL ,
    ID_PROYECTO      NUMBER NOT NULL ,
    CONSTRAINT VERSIONES_PK PRIMARY KEY (ID_VERSION),
    CONSTRAINT V_VERSION_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO (ID_PROYECTO) 
  );

CREATE SEQUENCE SEC_VERSIONES
  INCREMENT by 1
  MINVALUE 1
;

  
CREATE TABLE PROYECTO_VERSION
  (
    ID_PROYECTO_VERSION NUMBER NOT NULL ,
    ID_VERSION       NUMBER NOT NULL ,
    ID_PROYECTO      NUMBER NOT NULL ,
    CODIGO_PROYECTO  VARCHAR2(20 ),
    TITULO_PROPUESTO VARCHAR2(600 ) NOT NULL ,
    ID_LINEA         NUMBER NOT NULL ,
    ID_PERIODO       NUMBER,
    FUNCION_PROYECTO VARCHAR2(4000 ),
    FECHA_ESTIMADA_INICIO TIMESTAMP (6),
    FECHA_ESTIMADA_FINALIZACION TIMESTAMP (6),
    VALOR_TOTAL  NUMBER(11,2),
    CONVOCATORIA VARCHAR2(100 ),
    FECHA_REGISTRO TIMESTAMP (6),
    TEMA VARCHAR2(600 ),
    FECHA_APROBACION_COMITE TIMESTAMP (6),
    NRO_ACTA_APROBACION_COMITE VARCHAR2(20 ),
    ID_USUARIO_ROL             NUMBER NOT NULL ,
    FECHA_ACTUALIZACION TIMESTAMP (6),
    ID_USUARIO_ROL_ACTUALIZA  NUMBER,
    ID_ESTADO                 NUMBER NOT NULL ,
    INFORME_FINAL             VARCHAR2(600 ),
    DESCRIPCION_INFORME_FINAL VARCHAR2(600 ),
    FECHA_REGISTRO_INFORME_FINAL DATE,
    ID_PROGRAMA      NUMBER,
    RESUMEN_PROYECTO VARCHAR2(600 ),
    FECHA_APROBACION_COMITE_2 DATE,
    NRO_ACTA_APROB_COMITE     VARCHAR2(20 ),
    ID_UNIDAD_POLICIAL        NUMBER,
    ESTADO_TEMPORAL_FINANCIA  VARCHAR2(20 ),
    VALOR_FINANCIAR           NUMBER(11,2),
    ID_PROPUESTA_NECESIDAD    NUMBER,
    ID_PROPUESTA_CONVOCATORIA NUMBER,
    ID_ESTADO_IMPLEMENTACION  NUMBER,
    PRESUPUESTO_SOLICITADO    NUMBER,
    CONSTRAINT V_PROYECTO_PK PRIMARY KEY (ID_PROYECTO_VERSION),
    CONSTRAINT V_PROYECTO_VERSIONES_FK FOREIGN KEY (ID_VERSION) REFERENCES VERSIONES (ID_VERSION) ,
    CONSTRAINT V_PROYECTO_LINEA_FK FOREIGN KEY (ID_LINEA) REFERENCES LINEA (ID_LINEA) ,
    CONSTRAINT V_PROYECTO_PERIODO_FK FOREIGN KEY (ID_PERIODO) REFERENCES PERIODO (ID_PERIODO) ,
    CONSTRAINT V_PROYECTO_USUARIO_ROL_FK FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) ,
    CONSTRAINT V_PROYECTO_USUARIO_ROL_FKV2 FOREIGN KEY (ID_USUARIO_ROL_ACTUALIZA) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) ,
    CONSTRAINT V_PROYECTO_ESTADO_FK FOREIGN KEY (ID_ESTADO) REFERENCES CONSTANTES (ID_CONSTANTES) ,
    CONSTRAINT V_PROYECTO_UNIDAD_POLICIAL_FK FOREIGN KEY (ID_UNIDAD_POLICIAL) REFERENCES UNIDAD_POLICIAL (ID_UNIDAD_POLICIAL) ,
    CONSTRAINT V_ID_PRO_NECES_PROPUEST_NEC_FK FOREIGN KEY (ID_PROPUESTA_NECESIDAD) REFERENCES PROPUESTA_NECESIDAD (ID_PROPUESTA_NECESIDAD) ,
    CONSTRAINT V_ID_PRO_CONVOC_PROYECTO_FK FOREIGN KEY (ID_PROPUESTA_CONVOCATORIA) REFERENCES PROYECTO (ID_PROYECTO) 
  );
COMMENT ON COLUMN PROYECTO_VERSION.ID_PROGRAMA
IS
  'Identificador del programa, cuando el tipo de proyecto sea de proyecto de grado';
  COMMENT ON COLUMN PROYECTO_VERSION.RESUMEN_PROYECTO
IS
  'Resumen del proyecto en el caso de que el proyecto sea proyecto de grado';
  COMMENT ON COLUMN PROYECTO_VERSION.FECHA_APROBACION_COMITE_2
IS
  'Fecha de aprobación en comité para proyectos de grado';
  COMMENT ON COLUMN PROYECTO_VERSION.NRO_ACTA_APROB_COMITE
IS
  'Número de acta de aprobación en comité (Solo para proyectos de grado)';


CREATE SEQUENCE SEC_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;


CREATE TABLE FUENTE_PROYECTO_VERSION
  (
    ID_FUENTE_PROYECTO NUMBER NOT NULL ,
    ID_TIPO_FUENTE     NUMBER NOT NULL ,
    ID_PROYECTO        NUMBER NOT NULL ,
    ID_USUARIO_ROL     NUMBER NOT NULL ,
    FECHA_REGISTRO TIMESTAMP (6) NOT NULL ,
    NOMBRE_FUENTE    VARCHAR2(100 ) NOT NULL ,
    FUENTE_BASE      CHAR(1 ) DEFAULT 'N',    
    USUARIO_REGISTRA VARCHAR2(30 ),
    MAQUINA          VARCHAR2(50 ),
    CONSTRAINT V_FUENTE_PROYECTO_PK PRIMARY KEY (ID_FUENTE_PROYECTO),    
    CONSTRAINT V_TIPO_FUENTE_PROYECTO_FK FOREIGN KEY (ID_TIPO_FUENTE) REFERENCES CONSTANTES (ID_CONSTANTES) ,
    CONSTRAINT V_FUENTE_PROYECTO_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_FUENTEUSUARIO_USUARIOROL_FK FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) 
  );

CREATE SEQUENCE SEC_FUENTE_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE EQUIPOS_INVESTIGACION_VERSION
  (
    ID_EQUIPO_INVESTIGACION NUMBER NOT NULL ,
    VALOR                   NUMBER(15,2) NOT NULL ,
    ESPECIFICACIONES        VARCHAR2(512 ) NOT NULL ,
    ID_FUENTE_PROYECTO      NUMBER NOT NULL ,
    ID_ORIGEN               NUMBER NOT NULL ,
    NOMBRE_EQUIPO           VARCHAR2(250 ),
    CONSTRAINT V_EQUIPOS_INVESTIGACION_PK PRIMARY KEY (ID_EQUIPO_INVESTIGACION),
    CONSTRAINT V_EQUIPOS_FUENTEPROYECTO_FK FOREIGN KEY (ID_FUENTE_PROYECTO) REFERENCES FUENTE_PROYECTO_VERSION (ID_FUENTE_PROYECTO),
    CONSTRAINT V_EQUIPOS_CONSTANTES_FK FOREIGN KEY (ID_ORIGEN) REFERENCES CONSTANTES (ID_CONSTANTES) 
  );

CREATE SEQUENCE SEC_EQUIPOS_INVESTIGACION_VERS
  INCREMENT by 1
  MINVALUE 1
;


CREATE TABLE INVESTIGADORES_PROY_VERSION
  (
    ID_INVESTIGADOR_PROYECTO NUMBER NOT NULL ,
    ID_PROYECTO              NUMBER,
    VALOR_ESPECIE            NUMBER(15,2),
    ID_TIPO_VINCULACION      NUMBER,
    IDENTIFICACION           VARCHAR2(100 ),
    FUNCION_PROYECTO         VARCHAR2(600 ),
    HORAS_DEDICACION         NUMBER(3,0),
    INVESTIGADO_3ANIOS       CHAR(1 ),
    INVESTIGADO_ANUAL        CHAR(1 ),
    VALOR_HORA               NUMBER(12,2),
    ACTIVO                   CHAR(1 ),
    VALOR_EFECTIVO           NUMBER(15,2),
    ID_FUENTE_PROYECTO       NUMBER,
    ID_USUARIO_ROL           NUMBER,
    FECHA_REGISTRO TIMESTAMP (6) NOT NULL ,
    TELEFONO                      VARCHAR2(50 ),
    INSTITUCION_EXTERNA           VARCHAR2(250 ),
    NOMBRE_COMPLETO               VARCHAR2(100 ),
    GRADO                         VARCHAR2(100 ),
    CORREO                        VARCHAR2(100 ),
    CARGO                         VARCHAR2(100 ),
    CALCULO_HORA_TOTAL            NUMBER,
    ID_UNIDAD_POLICIAL            NUMBER,
    ID_TIPO_INVESTIGADOR          NUMBER,
    ORIGEN_SIAF_O_INVESTI         CHAR(1 ) DEFAULT 'S',
    ID_PLAN_TRABAJO               NUMBER,
    HORAS_TOTALES_IMPL            NUMBER,
    HORAS_DEDICADA_AVANCE_IMPL    NUMBER,
    HORAS_DEDICADA_AVANC_FIN_IMPL NUMBER,
    CONSTRAINT V_INVESTIGADORES_PROYECTO_PK PRIMARY KEY (ID_INVESTIGADOR_PROYECTO) ,
    CONSTRAINT V_INVESTIGA_PROYEC_CONSTANT_FK FOREIGN KEY (ID_TIPO_VINCULACION) REFERENCES CONSTANTES (ID_CONSTANTES) ,
    CONSTRAINT V_INVESTIGA_PROYEC_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_ID_UNIDA_INVES_PRO_POLICI_FK FOREIGN KEY (ID_UNIDAD_POLICIAL) REFERENCES UNIDAD_POLICIAL (ID_UNIDAD_POLICIAL) ,
    CONSTRAINT V_INVES_PROY_CONSTANTE_FK FOREIGN KEY (ID_TIPO_INVESTIGADOR) REFERENCES CONSTANTES (ID_CONSTANTES) ,
    CONSTRAINT V_INVESTIGADORES_PROYECTO_FK1 FOREIGN KEY (ID_PLAN_TRABAJO) REFERENCES PLAN_TRABAJO_IMPLEMENTACION (ID_PLAN_TRABAJO) 
  );
COMMENT ON COLUMN INVESTIGADORES_PROY_VERSION.ID_TIPO_VINCULACION
IS
  'Tipo de vinculación del investigador (caso en que el proyecto sea proyecto de grado)';
  COMMENT ON COLUMN INVESTIGADORES_PROY_VERSION.FECHA_REGISTRO
IS
  'Campo que indica de donde fue originado el investigador (TABLA): S=SIAF_o_VISTAFUNCIONARIO, I=INVESTIGADOR';

CREATE SEQUENCE SEC_INVESTIGADORES_PROY_VERSIO
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE EVENTO_PROYECTO_VERSION
  (
    ID_EVENTO_PROYECTO NUMBER NOT NULL ,
    ID_FUENTE_PROYECTO NUMBER NOT NULL ,
    COSTO              NUMBER(15,2) NOT NULL ,
    ID_PROYECTO        NUMBER NOT NULL ,
    TITULO_EVENTO      VARCHAR2(256 ) NOT NULL ,
    OBJETIVO_EVENTO    VARCHAR2(512 ) NOT NULL ,
    FECHA_REGISTRO DATE NOT NULL ,
    ID_USUARIO_ROL NUMBER NOT NULL ,
    CODIGO_CIUDAD  VARCHAR2(6 ),
    NOMBRE_CIUDAD  VARCHAR2(100 ),
    CONSTRAINT V_EVENTO_PROYECTO_PK PRIMARY KEY (ID_EVENTO_PROYECTO),
    CONSTRAINT V_EVENTO_PROYECTO_FK1 FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_EVENTO_USUARIOROL_FK FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) ,
    CONSTRAINT V_EVENTO_FUENTE_PRO_FK FOREIGN KEY (ID_FUENTE_PROYECTO) REFERENCES FUENTE_PROYECTO_VERSION (ID_FUENTE_PROYECTO) 
  );

CREATE SEQUENCE SEC_EVENTO_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE OTROS_GASTOS_PROYECTO_VERSION
  (
    ID_OTROS_GASTOS_PROYECTO NUMBER NOT NULL ,
    VALOR                    NUMBER NOT NULL ,
    ID_FUENTE_PROYECTO_VERSION       NUMBER NOT NULL ,
    ID_TIPO_RUBRO            NUMBER NOT NULL ,
    ID_TIPO_ESPECIE_EFECTIVO NUMBER,
    FECHA_REGISTRO DATE,
    ID_USUARIO_ROL NUMBER,
    CONSTRAINT V_OTROS_GASTOS_PROYECTO_PK PRIMARY KEY (ID_OTROS_GASTOS_PROYECTO)
  );

CREATE SEQUENCE SEC_OTROS_GASTOS_PROYECTO_VERS
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE VIAJES_PROYECTO_VERSION
  (
    ID_VIAJE_PROYECTO        NUMBER NOT NULL ,
    ID_INVESTIGADOR_PROYECTO NUMBER NOT NULL ,
    EVENTO                   VARCHAR2(512 ) NOT NULL ,
    CODIGO_CIUDAD_ORIGEN     VARCHAR2(6 ) NOT NULL ,
    NOMBRE_CIUDAD_ORIGEN     VARCHAR2(100 ) NOT NULL ,
    CODIGO_CIUDAD_DESTINO    VARCHAR2(6 ) NOT NULL ,
    NOMBRE_CIUDAD_DESTINO    VARCHAR2(100 ) NOT NULL ,
    COSTOS_PASAJES           NUMBER(11,2) NOT NULL ,
    COSTOS_VIATICOS          NUMBER(11,2) NOT NULL ,
    ID_FUENTE_PROYECTO       NUMBER,
    CONSTRAINT V_VIAJES_PROYECTO_PK PRIMARY KEY (ID_VIAJE_PROYECTO),
    CONSTRAINT V_VIAJE_PROY_INVEST_PROYEC_FK FOREIGN KEY (ID_INVESTIGADOR_PROYECTO) REFERENCES INVESTIGADORES_PROY_VERSION (ID_INVESTIGADOR_PROYECTO) ,
    CONSTRAINT V_FUENTE_PROY_INVEST_PROYEC_FK FOREIGN KEY (ID_FUENTE_PROYECTO) REFERENCES FUENTE_PROYECTO_VERSION (ID_FUENTE_PROYECTO) 
  );
COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.ID_VIAJE_PROYECTO
IS
  'Identificador único del viaje proyecto';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.ID_INVESTIGADOR_PROYECTO
IS
  'Identificador de investigador proyecto';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.EVENTO
IS
  'Evento';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.CODIGO_CIUDAD_ORIGEN
IS
  'Codigo de ciudad origen';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.NOMBRE_CIUDAD_ORIGEN
IS
  'Nombre de ciudad de origen';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.CODIGO_CIUDAD_DESTINO
IS
  'Código de ciudad destino';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.NOMBRE_CIUDAD_DESTINO
IS
  'Nombre de ciudad destino';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.COSTOS_PASAJES
IS
  'Costo de los pasajes';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.COSTOS_VIATICOS
IS
  'Costo de los viaticos';
  COMMENT ON COLUMN VIAJES_PROYECTO_VERSION.ID_FUENTE_PROYECTO
IS
  'Identificador de la fuente del proyecto';

CREATE SEQUENCE SEC_VIAJES_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE INDICADORES_PROYECTO_VERSION
  (
    ID_INDICADOR_PROYECTO NUMBER NOT NULL ,
    NOMBRE_INDICADOR      VARCHAR2(100 ),
    NOMBRE_NUMERADOR      VARCHAR2(50 ) NOT NULL ,
    NOMBRE_DENOMINADOR    VARCHAR2(50 ) NOT NULL ,
    FECHA_REGISTRO TIMESTAMP (6) NOT NULL ,
    ID_USUARIO_ROL    NUMBER NOT NULL ,
    ID_PROYECTO       NUMBER NOT NULL ,
    INDICADOR_BASE    CHAR(1 ) DEFAULT 'N',
    CASO_USO          VARCHAR2(50 ),
    VALOR_NUMERADOR   NUMBER,
    VALOR_DENOMINADOR NUMBER,
    CONSTRAINT V_INDICADORES_PROYECTO_PK PRIMARY KEY (ID_INDICADOR_PROYECTO) ,
    CONSTRAINT V_INDICADORES_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_INDICADORES_USUARIOROL_FK FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) 
  );

CREATE SEQUENCE SEC_INDICADORES_PROYECTO_VERSI
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE TEMA_PROYECTO_VERSION
  (
    ID_TEMA_PROYECTO NUMBER NOT NULL ,
    TEXTO            VARCHAR2(4000 ),
    ARCHIVO_SOPORTE  VARCHAR2(300 ),
    ID_PROYECTO      NUMBER,
    ID_TEMA          NUMBER,
    FECHA_REGISTRO TIMESTAMP (6),
    USUARIO                   VARCHAR2(100 ),
    NOMBRE_ARCHIVO_FISICO     VARCHAR2(300 ),
    TIPO_CONTENIDO_ARCHIVO    VARCHAR2(300 ),    
    TIPO_TAB_INFORMACION_IMPL VARCHAR2(100 ),
    CONSTRAINT V_TEMA_PROYECTO_PK PRIMARY KEY (ID_TEMA_PROYECTO),    
    CONSTRAINT V_TEMA_PROYECTO_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_TEMA_PROYECTO_TEMAS_FK FOREIGN KEY (ID_TEMA) REFERENCES TEMA (ID_TEMA) 
  );

CREATE SEQUENCE SEC_TEMA_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;


CREATE TABLE GRUPO_INVEST_PROYECTO_VERSION
  (
    ID_GRUPO_INVEST_PROYECTO NUMBER NOT NULL ,
    FECHA_VINCULACION TIMESTAMP (6),
    ID_GRUPO_INVESTIGACION NUMBER NOT NULL ,
    ID_PROYECTO            NUMBER,
    FECHA_REGISTRO DATE NOT NULL ,
    ID_USUARIO_ROL NUMBER,
    USUARIO        VARCHAR2(50 ) NOT NULL ,
    MAQUINA        VARCHAR2(100 ) NOT NULL ,
    CONSTRAINT V_GRUPO_INVEST_PROYECTO_PK PRIMARY KEY (ID_GRUPO_INVEST_PROYECTO),
    CONSTRAINT V_GRP_INVEST_PROY_GRU_INVES_FK FOREIGN KEY (ID_GRUPO_INVESTIGACION) REFERENCES GRUPO_INVESTIGACION (ID_GRUPO_INVESTIGACION) ,
    CONSTRAINT V_GRUP_INVEST_PROYE_PROYECT_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) 
  );

CREATE SEQUENCE SEC_GRUPO_INVEST_PROYECTO_VERS
  INCREMENT by 1
  MINVALUE 1
;


CREATE TABLE SEMILLERO_PROYECTO_VERSION
  (
    ID_SEMILLERO_PROYECTO NUMBER NOT NULL ,
    ID_PROYECTO           NUMBER NOT NULL ,
    FECHA_REGISTRO TIMESTAMP (6),
    USUARIO              VARCHAR2(100 ),
    ID_SEMILLERO         NUMBER,
    APORTE_INVESTIGACION VARCHAR2(600 ) NOT NULL ,
    ID_UNIDAD_POLICIAL   NUMBER,
    CONSTRAINT V_SEMILLERO_PROYECTO_PK PRIMARY KEY (ID_SEMILLERO_PROYECTO) ,
    CONSTRAINT V_SEMILLER_PROYECT_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_SEMILL_PROYE_SEMIL_INVEST_FK FOREIGN KEY (ID_SEMILLERO) REFERENCES SEMILLERO_INVESTIGACION (ID_SEMILLERO) ,
    CONSTRAINT V_ID_UNIDAD_UNIDAD_POLICIAL_FK FOREIGN KEY (ID_UNIDAD_POLICIAL) REFERENCES UNIDAD_POLICIAL (ID_UNIDAD_POLICIAL) 
  );

CREATE SEQUENCE SEC_SEMILLERO_PROYECTO_VERSION
  INCREMENT by 1
  MINVALUE 1
;

CREATE TABLE INSTITUCIONES_PROYECTO_VERSION
  (
    ID_INSTITUCION_PROYECTO NUMBER NOT NULL ,
    FECHA_REGISTRO TIMESTAMP (6) NOT NULL ,
    ID_USUARIO_ROL       NUMBER NOT NULL ,
    ID_INSTITUCION       NUMBER NOT NULL ,
    APORTE_INVESTIGACION VARCHAR2(600 ) NOT NULL ,
    VALOR_OTRO_TIPO      VARCHAR2(150 ),
    ID_PROYECTO          NUMBER NOT NULL ,
    CONSTRAINT V_INSTITUCIONES_PROYECTO_PK PRIMARY KEY (ID_INSTITUCION_PROYECTO) ,
    CONSTRAINT V_INSTITU_PROYECTO_FK FOREIGN KEY (ID_PROYECTO) REFERENCES PROYECTO_VERSION (ID_PROYECTO_VERSION) ,
    CONSTRAINT V_INSTITU_CONSTANTES_FK FOREIGN KEY (ID_INSTITUCION) REFERENCES CONSTANTES (ID_CONSTANTES) ,
    CONSTRAINT V_INSTITU_USUARIOROL_FK FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL) 
  );

CREATE SEQUENCE SEC_INSTITUCION_PROYECTO_VERS
  INCREMENT by 1
  MINVALUE 1
;



CREATE OR REPLACE PROCEDURE PRC_VERSION_PROYECTO 
(
  P_ID_PROYECTO IN NUMBER,  
  ID_VERSION_PROYECTO IN NUMBER
) AS  

  ID_SEC_INSERT_PROYECTO_VERSION NUMBER;    
  ID_SEC_INSERT_FUENTE_PROYECTO NUMBER;
  
BEGIN
  DBMS_OUTPUT.PUT_LINE('ID_VERSION_PROYECTO ' || ID_VERSION_PROYECTO);  
  
  --ESTA CONSULTA SIEMPRE DEVOLVERA UN REGISTRO
  FOR rec_proyecto IN (SELECT * FROM PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
  LOOP
    DBMS_OUTPUT.PUT_LINE('Encontro pro ' || rec_proyecto.ID_PROYECTO);
    
    ID_SEC_INSERT_PROYECTO_VERSION := SEC_PROYECTO_VERSION.NEXTVAL;
    INSERT INTO PROYECTO_VERSION (
      ID_PROYECTO_VERSION,
      ID_VERSION,
			ID_PROYECTO,
			CODIGO_PROYECTO,
			TITULO_PROPUESTO,
			ID_LINEA,
			ID_PERIODO,
			FUNCION_PROYECTO,
			FECHA_ESTIMADA_INICIO,
			FECHA_ESTIMADA_FINALIZACION,
			VALOR_TOTAL,
			CONVOCATORIA,
			FECHA_REGISTRO,
			TEMA,
			FECHA_APROBACION_COMITE,
			NRO_ACTA_APROBACION_COMITE,
			ID_USUARIO_ROL,
			FECHA_ACTUALIZACION,
			ID_USUARIO_ROL_ACTUALIZA,
			ID_ESTADO,
			INFORME_FINAL,
			DESCRIPCION_INFORME_FINAL,
			FECHA_REGISTRO_INFORME_FINAL,
			ID_PROGRAMA,
			RESUMEN_PROYECTO,
			FECHA_APROBACION_COMITE_2,
			NRO_ACTA_APROB_COMITE,
			ID_UNIDAD_POLICIAL,
			ESTADO_TEMPORAL_FINANCIA,
			VALOR_FINANCIAR,
			ID_PROPUESTA_NECESIDAD,
			ID_PROPUESTA_CONVOCATORIA,
			ID_ESTADO_IMPLEMENTACION,
			PRESUPUESTO_SOLICITADO)
			VALUES (
          ID_SEC_INSERT_PROYECTO_VERSION,
					ID_VERSION_PROYECTO,
          rec_proyecto.ID_PROYECTO,
					rec_proyecto.CODIGO_PROYECTO,
					rec_proyecto.TITULO_PROPUESTO,
					rec_proyecto.ID_LINEA,
					rec_proyecto.ID_PERIODO,
					rec_proyecto.FUNCION_PROYECTO,
					rec_proyecto.FECHA_ESTIMADA_INICIO,
					rec_proyecto.FECHA_ESTIMADA_FINALIZACION,
					rec_proyecto.VALOR_TOTAL,
					rec_proyecto.CONVOCATORIA,
					rec_proyecto.FECHA_REGISTRO,
					rec_proyecto.TEMA,
					rec_proyecto.FECHA_APROBACION_COMITE,
					rec_proyecto.NRO_ACTA_APROBACION_COMITE,
					rec_proyecto.ID_USUARIO_ROL,
					rec_proyecto.FECHA_ACTUALIZACION,
					rec_proyecto.ID_USUARIO_ROL_ACTUALIZA,
					rec_proyecto.ID_ESTADO,
					rec_proyecto.INFORME_FINAL,
					rec_proyecto.DESCRIPCION_INFORME_FINAL,
					rec_proyecto.FECHA_REGISTRO_INFORME_FINAL,
					rec_proyecto.ID_PROGRAMA,
					rec_proyecto.RESUMEN_PROYECTO,
					rec_proyecto.FECHA_APROBACION_COMITE_2,
					rec_proyecto.NRO_ACTA_APROB_COMITE,
					rec_proyecto.ID_UNIDAD_POLICIAL,
					rec_proyecto.ESTADO_TEMPORAL_FINANCIA,
					rec_proyecto.VALOR_FINANCIAR,
					rec_proyecto.ID_PROPUESTA_NECESIDAD,
					rec_proyecto.ID_PROPUESTA_CONVOCATORIA,
					rec_proyecto.ID_ESTADO_IMPLEMENTACION,
					rec_proyecto.PRESUPUESTO_SOLICITADO
			);
      
      --SEMILLERO DE DICHO PROYECTO
        --COPIA DE SEMILLERO PROYECTO
        FOR rec_semillero_proyecto IN (SELECT * FROM SEMILLERO_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
        
          DBMS_OUTPUT.PUT_LINE('  Encontro semillero proyecto ' || rec_semillero_proyecto.ID_SEMILLERO_PROYECTO);
          
       END LOOP;
       
      --INSTITUCIONES DE DICHO PROYECTO
        --COPIA DE INSTITUCIONES PROYECTO
        FOR rec_instituciones_proyecto IN (SELECT * FROM INSTITUCIONES_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
        
          DBMS_OUTPUT.PUT_LINE('  Encontro instituciones proyecto ' || rec_instituciones_proyecto.ID_INSTITUCION_PROYECTO);
          INSERT INTO INSTITUCIONES_PROYECTO_VERSION 
                  (
                    ID_INSTITUCION_PROYECTO,
                    FECHA_REGISTRO,
                    ID_USUARIO_ROL,
                    ID_INSTITUCION,
                    APORTE_INVESTIGACION,
                    VALOR_OTRO_TIPO,
                    ID_PROYECTO
                  )
                  VALUES(
                    SEC_INSTITUCION_PROYECTO_VERS.NEXTVAL,
                    rec_instituciones_proyecto.FECHA_REGISTRO,
                    rec_instituciones_proyecto.ID_USUARIO_ROL,
                    rec_instituciones_proyecto.ID_INSTITUCION,
                    rec_instituciones_proyecto.APORTE_INVESTIGACION,
                    rec_instituciones_proyecto.VALOR_OTRO_TIPO,
                    ID_SEC_INSERT_PROYECTO_VERSION);
          
       END LOOP;
       
      --GRUPO INVESTIGACION DE DICHO PROYECTO
        --COPIA DE GRUPOS INVESTIGACION PROYECTO
        FOR rec_grupo_inv_proyecto IN (SELECT * FROM GRUPO_INVEST_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
        
          DBMS_OUTPUT.PUT_LINE('  Encontro grupo investigacion proyecto ' || rec_grupo_inv_proyecto.ID_GRUPO_INVEST_PROYECTO);
          INSERT INTO GRUPO_INVEST_PROYECTO_VERSION 
            (
            ID_GRUPO_INVEST_PROYECTO,
            FECHA_VINCULACION,
            ID_GRUPO_INVESTIGACION,
            ID_PROYECTO,
            FECHA_REGISTRO,
            ID_USUARIO_ROL,
            USUARIO,
            MAQUINA
              )
              VALUES(
              SEC_GRUPO_INVEST_PROYECTO_VERS.NEXTVAL,									
            rec_grupo_inv_proyecto.FECHA_VINCULACION,
            rec_grupo_inv_proyecto.ID_GRUPO_INVESTIGACION,
            ID_SEC_INSERT_PROYECTO_VERSION,
            rec_grupo_inv_proyecto.FECHA_REGISTRO,
            rec_grupo_inv_proyecto.ID_USUARIO_ROL,
            rec_grupo_inv_proyecto.USUARIO,
            rec_grupo_inv_proyecto.MAQUINA);
          
        END LOOP;  
      
       --TEMAS PROYECTO DE DICHO PROYECTO
        --COPIA DE TEMAS PROYECTO
        FOR rec_tema_proyecto IN (SELECT * FROM TEMA_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
        
          DBMS_OUTPUT.PUT_LINE('  Encontro tema proyecto ' || rec_tema_proyecto.ID_TEMA_PROYECTO);
          INSERT INTO TEMA_PROYECTO_VERSION 
                (
                ID_TEMA_PROYECTO,
                TEXTO,
                ARCHIVO_SOPORTE,
                ID_PROYECTO,
                ID_TEMA,
                FECHA_REGISTRO,
                USUARIO,
                NOMBRE_ARCHIVO_FISICO,
                TIPO_CONTENIDO_ARCHIVO,
                TIPO_TAB_INFORMACION_IMPL
                )
                VALUES(
                SEC_TEMA_PROYECTO_VERSION.NEXTVAL,				
                rec_tema_proyecto.TEXTO,
                rec_tema_proyecto.ARCHIVO_SOPORTE,
                ID_SEC_INSERT_PROYECTO_VERSION,
                rec_tema_proyecto.ID_TEMA,
                rec_tema_proyecto.FECHA_REGISTRO,
                rec_tema_proyecto.USUARIO,
                rec_tema_proyecto.NOMBRE_ARCHIVO_FISICO,
                rec_tema_proyecto.TIPO_CONTENIDO_ARCHIVO,
                rec_tema_proyecto.TIPO_TAB_INFORMACION_IMPL);
          
        END LOOP;
      
        --INDICADORES DE DICHO PROYECTO
        --COPIA DE INDICADORES PROYECTO
        FOR rec_indicador_proyecto IN (SELECT * FROM INDICADORES_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
          DBMS_OUTPUT.PUT_LINE('  Encontro indicador proyecto ' || rec_indicador_proyecto.ID_INDICADOR_PROYECTO);
          
          INSERT INTO INDICADORES_PROYECTO_VERSION 
                  (
                    ID_INDICADOR_PROYECTO,
					NOMBRE_INDICADOR,
					NOMBRE_NUMERADOR,
					NOMBRE_DENOMINADOR,
					FECHA_REGISTRO,
					ID_USUARIO_ROL,
					ID_PROYECTO,
					INDICADOR_BASE,
					CASO_USO,
					VALOR_NUMERADOR,
					VALOR_DENOMINADOR
          )
          VALUES(
          SEC_INDICADORES_PROYECTO_VERSI.NEXTVAL,
					rec_indicador_proyecto.NOMBRE_INDICADOR,
					rec_indicador_proyecto.NOMBRE_NUMERADOR,
					rec_indicador_proyecto.NOMBRE_DENOMINADOR,
					rec_indicador_proyecto.FECHA_REGISTRO,
					rec_indicador_proyecto.ID_USUARIO_ROL,
					ID_SEC_INSERT_PROYECTO_VERSION,
					rec_indicador_proyecto.INDICADOR_BASE,
					rec_indicador_proyecto.CASO_USO,
					rec_indicador_proyecto.VALOR_NUMERADOR,
					rec_indicador_proyecto.VALOR_DENOMINADOR);
          
        END LOOP;
        
        --INVESTIGADORES DE DICHO PROYECTO
        --COPIA DE INVESTIGADOR PROYECTO
        FOR rec_investiga_proyecto IN (SELECT * FROM INVESTIGADORES_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
          DBMS_OUTPUT.PUT_LINE('  Encontro investigador ' || rec_investiga_proyecto.ID_INVESTIGADOR_PROYECTO);
          INSERT INTO INVESTIGADORES_PROY_VERSION(
          ID_INVESTIGADOR_PROYECTO,
          ID_PROYECTO,
          VALOR_ESPECIE,
          ID_TIPO_VINCULACION,
          IDENTIFICACION,
          FUNCION_PROYECTO,
          HORAS_DEDICACION,
          INVESTIGADO_3ANIOS,
          INVESTIGADO_ANUAL,
          VALOR_HORA,
          ACTIVO,
          VALOR_EFECTIVO,
          ID_FUENTE_PROYECTO,
          ID_USUARIO_ROL,
          FECHA_REGISTRO,
          TELEFONO,
          INSTITUCION_EXTERNA,
          NOMBRE_COMPLETO,
          GRADO,
          CORREO,
          CARGO,
          CALCULO_HORA_TOTAL,
          ID_UNIDAD_POLICIAL,
          ID_TIPO_INVESTIGADOR,
          ORIGEN_SIAF_O_INVESTI,
          ID_PLAN_TRABAJO,
          HORAS_TOTALES_IMPL,
          HORAS_DEDICADA_AVANCE_IMPL,
          HORAS_DEDICADA_AVANC_FIN_IMPL) 
        VALUES(
          SEC_INVESTIGADORES_PROY_VERSIO.NEXTVAL,
          ID_SEC_INSERT_PROYECTO_VERSION,
          rec_investiga_proyecto.VALOR_ESPECIE,
          rec_investiga_proyecto.ID_TIPO_VINCULACION,
          rec_investiga_proyecto.IDENTIFICACION,
          rec_investiga_proyecto.FUNCION_PROYECTO,
          rec_investiga_proyecto.HORAS_DEDICACION,
          rec_investiga_proyecto.INVESTIGADO_3ANIOS,
          rec_investiga_proyecto.INVESTIGADO_ANUAL,
          rec_investiga_proyecto.VALOR_HORA,
          rec_investiga_proyecto.ACTIVO,
          rec_investiga_proyecto.VALOR_EFECTIVO,
          rec_investiga_proyecto.ID_FUENTE_PROYECTO,
          rec_investiga_proyecto.ID_USUARIO_ROL,
          rec_investiga_proyecto.FECHA_REGISTRO,
          rec_investiga_proyecto.TELEFONO,
          rec_investiga_proyecto.INSTITUCION_EXTERNA,
          rec_investiga_proyecto.NOMBRE_COMPLETO,
          rec_investiga_proyecto.GRADO,
          rec_investiga_proyecto.CORREO,
          rec_investiga_proyecto.CARGO,
          rec_investiga_proyecto.CALCULO_HORA_TOTAL,
          rec_investiga_proyecto.ID_UNIDAD_POLICIAL,
          rec_investiga_proyecto.ID_TIPO_INVESTIGADOR,
          rec_investiga_proyecto.ORIGEN_SIAF_O_INVESTI,
          rec_investiga_proyecto.ID_PLAN_TRABAJO,
          rec_investiga_proyecto.HORAS_TOTALES_IMPL,
          rec_investiga_proyecto.HORAS_DEDICADA_AVANCE_IMPL,
          rec_investiga_proyecto.HORAS_DEDICADA_AVANC_FIN_IMPL
          );
        END LOOP;
        
        --FUENTES DE DICHO PROYECTO
        --COPIA DE FUENTE PROYECTO
        FOR rec_fuente_proyecto IN (SELECT * FROM FUENTE_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO)
        LOOP
          DBMS_OUTPUT.PUT_LINE('  Encontro fuente proyecto ' || rec_fuente_proyecto.ID_FUENTE_PROYECTO);
          
            ID_SEC_INSERT_FUENTE_PROYECTO := SEC_FUENTE_PROYECTO_VERSION.NEXTVAL;
            INSERT INTO FUENTE_PROYECTO_VERSION 
            (
              ID_FUENTE_PROYECTO,
              ID_TIPO_FUENTE,
              ID_PROYECTO,
              ID_USUARIO_ROL,
              FECHA_REGISTRO,
              NOMBRE_FUENTE,
              FUENTE_BASE,
              USUARIO_REGISTRA,
              MAQUINA
              )
              VALUES(
              ID_SEC_INSERT_FUENTE_PROYECTO,
              rec_fuente_proyecto.ID_TIPO_FUENTE,
              ID_SEC_INSERT_PROYECTO_VERSION,
              rec_fuente_proyecto.ID_USUARIO_ROL,
              rec_fuente_proyecto.FECHA_REGISTRO,
              rec_fuente_proyecto.NOMBRE_FUENTE,
              rec_fuente_proyecto.FUENTE_BASE,
              rec_fuente_proyecto.USUARIO_REGISTRA,
              rec_fuente_proyecto.MAQUINA);
              
              --POR CADA FUENTE - COPIA EQUIPOS INVESTIGACION
              --COPIA DE SEMILLERO PROYECTO
              FOR rec_equipo_inv_proyecto IN (SELECT * FROM EQUIPOS_INVESTIGACION WHERE ID_FUENTE_PROYECTO = rec_fuente_proyecto.ID_FUENTE_PROYECTO)
              LOOP
              
                DBMS_OUTPUT.PUT_LINE('    Encontro equipo investigacion ' || rec_equipo_inv_proyecto.ID_EQUIPO_INVESTIGACION);
                INSERT INTO EQUIPOS_INVESTIGACION_VERSION 
                  (
                    ID_EQUIPO_INVESTIGACION,
                    VALOR,
                    ESPECIFICACIONES,
                    ID_FUENTE_PROYECTO,
                    ID_ORIGEN,
                    NOMBRE_EQUIPO
                    )
                    VALUES(
                    SEC_EQUIPOS_INVESTIGACION_VERS.NEXTVAL,																			
                    rec_equipo_inv_proyecto.VALOR,
                    rec_equipo_inv_proyecto.ESPECIFICACIONES,
                    ID_SEC_INSERT_FUENTE_PROYECTO,
                    rec_equipo_inv_proyecto.ID_ORIGEN,
                    rec_equipo_inv_proyecto.NOMBRE_EQUIPO);
              END LOOP;
              
              --POR CADA FUENTE PROYECTO - COPIA DE EVENTO PROYECTO
              FOR rec_evento_proyecto IN (SELECT * FROM EVENTO_PROYECTO WHERE ID_PROYECTO = P_ID_PROYECTO AND ID_FUENTE_PROYECTO = rec_fuente_proyecto.ID_FUENTE_PROYECTO)
              LOOP
                  
                  DBMS_OUTPUT.PUT_LINE('    Encontro evento proyecto ' || rec_evento_proyecto.ID_EVENTO_PROYECTO);
                  INSERT INTO EVENTO_PROYECTO_VERSION 
                  (
                    ID_EVENTO_PROYECTO,
                    ID_FUENTE_PROYECTO,
                    COSTO,
                    ID_PROYECTO,
                    TITULO_EVENTO,
                    OBJETIVO_EVENTO,
                    FECHA_REGISTRO,
                    ID_USUARIO_ROL,
                    CODIGO_CIUDAD,
                    NOMBRE_CIUDAD
                    )
                    VALUES(
                    SEC_EVENTO_PROYECTO_VERSION.NEXTVAL,		
                    ID_SEC_INSERT_FUENTE_PROYECTO,
                    rec_evento_proyecto.COSTO,
                    ID_SEC_INSERT_PROYECTO_VERSION,
                    rec_evento_proyecto.TITULO_EVENTO,
                    rec_evento_proyecto.OBJETIVO_EVENTO,
                    rec_evento_proyecto.FECHA_REGISTRO,
                    rec_evento_proyecto.ID_USUARIO_ROL,
                    rec_evento_proyecto.CODIGO_CIUDAD,
                    rec_evento_proyecto.NOMBRE_CIUDAD);
              END LOOP;
              
              --POR CADA FUENTE PROYECTO - COPIA DE EVENTO PROYECTO
              FOR rec_otros_gasto_proyecto IN (SELECT * FROM OTROS_GASTOS_PROYECTO WHERE ID_FUENTE_PROYECTO = rec_fuente_proyecto.ID_FUENTE_PROYECTO)          
              LOOP
                  
                  DBMS_OUTPUT.PUT_LINE('    Encontro otros gastos proyecto ' || rec_otros_gasto_proyecto.ID_OTROS_GASTOS_PROYECTO);                  
                  INSERT INTO OTROS_GASTOS_PROYECTO_VERSION 
                  (
                    ID_OTROS_GASTOS_PROYECTO,
                    VALOR,
                    ID_FUENTE_PROYECTO_VERSION,
                    ID_TIPO_RUBRO,
                    ID_TIPO_ESPECIE_EFECTIVO,
                    FECHA_REGISTRO,
                    ID_USUARIO_ROL
                    )
                    VALUES(
                    SEC_OTROS_GASTOS_PROYECTO_VERS.NEXTVAL,		                    
                    rec_otros_gasto_proyecto.VALOR,
                    ID_SEC_INSERT_FUENTE_PROYECTO,
                    rec_otros_gasto_proyecto.ID_TIPO_RUBRO,
                    rec_otros_gasto_proyecto.ID_TIPO_ESPECIE_EFECTIVO,
                    rec_otros_gasto_proyecto.FECHA_REGISTRO,
                    rec_otros_gasto_proyecto.ID_USUARIO_ROL);
              END LOOP;    
              
        END LOOP;          
    END LOOP;--FIN LOOP PROYECTOS
    
    --HACEMOS EL LLAMADO PAQUETE DE PRESUPUESTO PARA EL PROYECTO RECIBIDO COMO PARAMETRO
      PKG_CALCULO_PRESUPUESTO.PRC_CREAR_ACTUALIZA_PRES( P_ID_PROYECTO );
      UPDATE RESUMEN_PRESUPUESTO_PROYECTO set ESTADO = CONCAT( 'P_VERSION_', TO_CHAR(ID_SEC_INSERT_PROYECTO_VERSION) ) WHERE ID_PROYECTO = P_ID_PROYECTO AND ESTADO = 'TEMPORAL';  
              
END PRC_VERSION_PROYECTO;

DROP TABLE EVENTO_INVESTIGACION;
CREATE TABLE EVENTO_INVESTIGACION(
    ID_EVENTO_INVESTIGACION NUMBER NOT NULL ,
    ID_TIPO_EVENTO NUMBER NOT NULL ,
    NOMBRE VARCHAR2(100) NOT NULL,
    DESCRIPCION VARCHAR2(600) NOT NULL,
    MODALIDAD_VIRTUAL CHAR(1) NOT NULL,
    MODALIDAD_PRESENCIAL CHAR(1) NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE NOT NULL,    
    LUGAR VARCHAR2(100) NOT NULL,
    CIUDAD VARCHAR2(100) NOT NULL,
    FECHA_REGISTRO TIMESTAMP NOT NULL ,
    FECHA_ACTUALIZA TIMESTAMP NOT NULL ,
    ID_USUARIO_ROL NUMBER NOT NULL,
    USUARIO  VARCHAR2(50) NOT NULL ,
    MAQUINA  VARCHAR2(100) NOT NULL ,
    NOMBRE_ARCHIVO VARCHAR2(250),
    NOMBRE_ARCHIVO_FISICO VARCHAR2(250),
    CONSTRAINT EVENTO_INVESTIGACION_PK PRIMARY KEY (ID_EVENTO_INVESTIGACION),
    CONSTRAINT EVEN_INVESTI_USUARIO_ROL_FK_1 FOREIGN KEY (ID_USUARIO_ROL) REFERENCES USUARIO_ROL (ID_USUARIO_ROL),
    CONSTRAINT EVEN_INVESTI_EVNETO_INVE_FK_2 FOREIGN KEY (ID_TIPO_EVENTO) REFERENCES CONSTANTES (ID_CONSTANTES) 
);

CREATE SEQUENCE SEC_EVENTO_INVESTIGACION
  INCREMENT by 1
  MINVALUE 1
;

Insert into OPCION_MENU (ID_OPCION_MENU,NOMBRE,TIPO_ACCESO,ACCION,ID_OPCION_MENU2,ORDEN,TITULO) values ('42','Gestionar Implementaciones','PRIVADO','BEAN:#{cuPr18IngresaModificarEventoInvestigacionFaces.initReturnCU}','3','8','Gestionar Implementaciones');

Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('64','10','3');
Insert into ROL_OPCION_MENU (ID_ROL_OPCION_MENU,ID_ROL,ID_OPCION_MENU) values ('65','10','42');

Insert into CONSTANTES (ID_CONSTANTES,TIPO,CODIGO,VALOR) values ('272','TIPO_EVENTO_INVESTIGA','Encuentro de investigación','Encuentro de investigación');
Insert into CONSTANTES (ID_CONSTANTES,TIPO,CODIGO,VALOR) values ('273','TIPO_EVENTO_INVESTIGA','Feria Nacional','Feria Nacional');
Insert into CONSTANTES (ID_CONSTANTES,TIPO,CODIGO,VALOR) values ('274','TIPO_EVENTO_INVESTIGA','Feria Internacional','Feria Internacional');

ALTER TABLE INVESTIGADORES_PROYECTO ADD ID_EVENTO_INVESTIGACION NUMBER;
ALTER TABLE INVESTIGADORES_PROYECTO ADD CONSTRAINT EVEN_INVESTI_INVES_PRO_FK_1 FOREIGN KEY (ID_EVENTO_INVESTIGACION) REFERENCES EVENTO_INVESTIGACION (ID_EVENTO_INVESTIGACION);

Insert into KEY_PROPERTIES (CLAVE,VALOR) values ('cu_pr_18_dir_file_archivo_soporte','C:\TEMP\');

--insert into CORREO_PARAMETRIZA select cp.CODIGO,cp.ASUNTO,cp.TEXTO,cp.FORMATO,cp.label from dinae1_2iteracion_final5.CORREO_PARAMETRIZA cp where cp.CODIGO = 'CU_CO_01_PUBLICACION_CONVOCATORIA_ENSAYO'